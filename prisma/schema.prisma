// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Leads {
    id        Int      @id @default(autoincrement())
    firstName String
    lastName  String
    email     String
    comments  String
    userId    String
    User      User?    @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now()) @map(name: "created_at")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Posts[]
  leads         Leads[]
  accounts      Account[]
  sessions      Session[]
  groups        Groups[]
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @default(now()) @map(name: "updated_at")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Groups {
    id        Int      @id @default(autoincrement())
    group     String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @default(now()) @map(name: "updated_at")
    User      User[]

    @@map(name: "groups")
}

model Posts {
    id          Int       @id @default(autoincrement())
    title       String    @unique
    content     String?
    draft       Boolean?
    tags        Tags[]
    image       String?
    excerpt     String?
    publishedAt DateTime? @map(name: "publishedAt")
    createdAt   DateTime  @default(now()) @map(name: "created_at")
    updatedAt   DateTime  @default(now()) @map(name: "updated_at")
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "posts")
}

model Tags {
    id          Int      @id @default(autoincrement())
    title       String   @unique
    description String?
    createdAt   DateTime @default(now()) @map(name: "created_at")
    updatedAt   DateTime @default(now()) @map(name: "updated_at")
    posts       Posts[]

    @@map(name: "tags")
}
